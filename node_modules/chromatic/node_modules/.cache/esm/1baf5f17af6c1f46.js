let debug,loggly,format,strip,LOGGLY_CUSTOMER_TOKEN;_af6‍.x([["default",()=>sendDebugToLoggly]]);_af6‍.w("debug",[["default",["debug"],function(v){debug=v}]]);_af6‍.w("node-loggly-bulk",[["default",["loggly"],function(v){loggly=v}]]);_af6‍.w("util",[["format",["format"],function(v){format=v}]]);_af6‍.w("strip-color",[["default",["strip"],function(v){strip=v}]]);_af6‍.w("../constants",[["LOGGLY_CUSTOMER_TOKEN",["LOGGLY_CUSTOMER_TOKEN"],function(v){LOGGLY_CUSTOMER_TOKEN=v}]]);






const isDebugging = !!process.env.DEBUG;

               function sendDebugToLoggly({ sessionId }) {
  if (process.env.DISABLE_LOGGING) {
    return;
  }

  const client = loggly.createClient({
    token: LOGGLY_CUSTOMER_TOKEN,
    subdomain: 'hichroma',
    tags: ['chromatic-cli'],
    json: true,
  });

  debug.enable('chromatic-cli:*,localtunnel:*');

  debug.log = (...args) => {
    const msg = format(...args);
    client.log({ sessionId, msg: strip(msg) });

    // Is the user debugging already? If so they will get what we want to debug :shrug:
    if (isDebugging) {
      process.stderr.write(`${msg}\n`);
    }
  };
}
